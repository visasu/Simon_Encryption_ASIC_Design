//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /afs/asu.edu/users/v/s/r/vsriva10/EEE591/HW2/starter-02/primitives/simon32_64.vp
//  Source template: simon32_64
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// simon32_64.vp
// dataWidth (_GENESIS2_DECLARATION_PRIORITY_) = 16
//
// keyWidth (_GENESIS2_DECLARATION_PRIORITY_) = 16
//
// keyring (_GENESIS2_DECLARATION_PRIORITY_) = 4
//
// cycles (_GENESIS2_DECLARATION_PRIORITY_) = 34
//


//Generate module

module simon32_64 (
input clk, 
input reset,
input [31:0] plaintext,
input [63:0] key,
output [31:0] ciphertext
);
	reg [31:0] ciphertext_reg;

	reg [15:0] k0 [33:0];
	reg [15:0] k1 [33:0];
	reg [15:0] k2 [33:0];
	reg [15:0] k3 [33:0];

	reg [0:30] z; //Inverted due to indexing 

	reg [15:0] x [33:0];
	reg [15:0] x1 [33:0];

	wire [31:0] ciphertext_w;

	wire [15:0] k_w [33:0];
	wire [15:0] k_out [33:0];

	wire [30:0] z_in;

	wire [15:0] x_w [33:0];


///////////////Floping I/Os///////////////////////
/*	always @(negedge reset or posedge clk)
	begin
		if(!reset)
		begin
			k0[0]<=k_w[0];
			k0[1]<=k_w[1];
			k0[2]<=k_w[2];
			k0[3]<=k_w[3];
			k0[4]<=k_w[4];
			k0[5]<=k_w[5];
			k0[6]<=k_w[6];
			k0[7]<=k_w[7];
			k0[8]<=k_w[8];
			k0[9]<=k_w[9];
			k0[10]<=k_w[10];
			k0[11]<=k_w[11];
			k0[12]<=k_w[12];
			k0[13]<=k_w[13];
			k0[14]<=k_w[14];
			k0[15]<=k_w[15];
			k0[16]<=k_w[16];
			k0[17]<=k_w[17];
			k0[18]<=k_w[18];
			k0[19]<=k_w[19];
			k0[20]<=k_w[20];
			k0[21]<=k_w[21];
			k0[22]<=k_w[22];
			k0[23]<=k_w[23];
			k0[24]<=k_w[24];
			k0[25]<=k_w[25];
			k0[26]<=k_w[26];
			k0[27]<=k_w[27];
			k0[28]<=k_w[28];
			k0[29]<=k_w[29];
			k0[30]<=k_w[30];
			k0[31]<=k_w[31];
			k0[32]<=k_w[32];
			k0[33]<=k_w[33];

			k1[0]<=k0[0];
			k1[1]<=k0[1];
			k1[2]<=k0[2];
			k1[3]<=k0[3];
			k1[4]<=k0[4];
			k1[5]<=k0[5];
			k1[6]<=k0[6];
			k1[7]<=k0[7];
			k1[8]<=k0[8];
			k1[9]<=k0[9];
			k1[10]<=k0[10];
			k1[11]<=k0[11];
			k1[12]<=k0[12];
			k1[13]<=k0[13];
			k1[14]<=k0[14];
			k1[15]<=k0[15];
			k1[16]<=k0[16];
			k1[17]<=k0[17];
			k1[18]<=k0[18];
			k1[19]<=k0[19];
			k1[20]<=k0[20];
			k1[21]<=k0[21];
			k1[22]<=k0[22];
			k1[23]<=k0[23];
			k1[24]<=k0[24];
			k1[25]<=k0[25];
			k1[26]<=k0[26];
			k1[27]<=k0[27];
			k1[28]<=k0[28];
			k1[29]<=k0[29];
			k1[30]<=k0[30];
			k1[31]<=k0[31];
			k1[32]<=k0[32];
			k1[33]<=k0[33];
			k2[0]<=k1[0];
			k2[1]<=k1[1];
			k2[2]<=k1[2];
			k2[3]<=k1[3];
			k2[4]<=k1[4];
			k2[5]<=k1[5];
			k2[6]<=k1[6];
			k2[7]<=k1[7];
			k2[8]<=k1[8];
			k2[9]<=k1[9];
			k2[10]<=k1[10];
			k2[11]<=k1[11];
			k2[12]<=k1[12];
			k2[13]<=k1[13];
			k2[14]<=k1[14];
			k2[15]<=k1[15];
			k2[16]<=k1[16];
			k2[17]<=k1[17];
			k2[18]<=k1[18];
			k2[19]<=k1[19];
			k2[20]<=k1[20];
			k2[21]<=k1[21];
			k2[22]<=k1[22];
			k2[23]<=k1[23];
			k2[24]<=k1[24];
			k2[25]<=k1[25];
			k2[26]<=k1[26];
			k2[27]<=k1[27];
			k2[28]<=k1[28];
			k2[29]<=k1[29];
			k2[30]<=k1[30];
			k2[31]<=k1[31];
			k2[32]<=k1[32];
			k2[33]<=k1[33];
			k3[0]<=k2[0];
			k3[1]<=k2[1];
			k3[2]<=k2[2];
			k3[3]<=k2[3];
			k3[4]<=k2[4];
			k3[5]<=k2[5];
			k3[6]<=k2[6];
			k3[7]<=k2[7];
			k3[8]<=k2[8];
			k3[9]<=k2[9];
			k3[10]<=k2[10];
			k3[11]<=k2[11];
			k3[12]<=k2[12];
			k3[13]<=k2[13];
			k3[14]<=k2[14];
			k3[15]<=k2[15];
			k3[16]<=k2[16];
			k3[17]<=k2[17];
			k3[18]<=k2[18];
			k3[19]<=k2[19];
			k3[20]<=k2[20];
			k3[21]<=k2[21];
			k3[22]<=k2[22];
			k3[23]<=k2[23];
			k3[24]<=k2[24];
			k3[25]<=k2[25];
			k3[26]<=k2[26];
			k3[27]<=k2[27];
			k3[28]<=k2[28];
			k3[29]<=k2[29];
			k3[30]<=k2[30];
			k3[31]<=k2[31];
			k3[32]<=k2[32];
			k3[33]<=k2[33];
		end
		else
		begin
			z<=z_in;
			k0[0]<=k_w[0];
			k0[1]<=k_w[1];
			k0[2]<=k_w[2];
			k0[3]<=k_w[3];
			k0[4]<=k_w[4];
			k0[5]<=k_w[5];
			k0[6]<=k_w[6];
			k0[7]<=k_w[7];
			k0[8]<=k_w[8];
			k0[9]<=k_w[9];
			k0[10]<=k_w[10];
			k0[11]<=k_w[11];
			k0[12]<=k_w[12];
			k0[13]<=k_w[13];
			k0[14]<=k_w[14];
			k0[15]<=k_w[15];
			k0[16]<=k_w[16];
			k0[17]<=k_w[17];
			k0[18]<=k_w[18];
			k0[19]<=k_w[19];
			k0[20]<=k_w[20];
			k0[21]<=k_w[21];
			k0[22]<=k_w[22];
			k0[23]<=k_w[23];
			k0[24]<=k_w[24];
			k0[25]<=k_w[25];
			k0[26]<=k_w[26];
			k0[27]<=k_w[27];
			k0[28]<=k_w[28];
			k0[29]<=k_w[29];
			k0[30]<=k_w[30];
			k0[31]<=k_w[31];
			k0[32]<=k_w[32];
			k0[33]<=k_w[33];

			k1[0]<=k0[0];
			k1[1]<=k0[1];
			k1[2]<=k0[2];
			k1[3]<=k0[3];
			k1[4]<=k0[4];
			k1[5]<=k0[5];
			k1[6]<=k0[6];
			k1[7]<=k0[7];
			k1[8]<=k0[8];
			k1[9]<=k0[9];
			k1[10]<=k0[10];
			k1[11]<=k0[11];
			k1[12]<=k0[12];
			k1[13]<=k0[13];
			k1[14]<=k0[14];
			k1[15]<=k0[15];
			k1[16]<=k0[16];
			k1[17]<=k0[17];
			k1[18]<=k0[18];
			k1[19]<=k0[19];
			k1[20]<=k0[20];
			k1[21]<=k0[21];
			k1[22]<=k0[22];
			k1[23]<=k0[23];
			k1[24]<=k0[24];
			k1[25]<=k0[25];
			k1[26]<=k0[26];
			k1[27]<=k0[27];
			k1[28]<=k0[28];
			k1[29]<=k0[29];
			k1[30]<=k0[30];
			k1[31]<=k0[31];
			k1[32]<=k0[32];
			k1[33]<=k0[33];
			k2[0]<=k1[0];
			k2[1]<=k1[1];
			k2[2]<=k1[2];
			k2[3]<=k1[3];
			k2[4]<=k1[4];
			k2[5]<=k1[5];
			k2[6]<=k1[6];
			k2[7]<=k1[7];
			k2[8]<=k1[8];
			k2[9]<=k1[9];
			k2[10]<=k1[10];
			k2[11]<=k1[11];
			k2[12]<=k1[12];
			k2[13]<=k1[13];
			k2[14]<=k1[14];
			k2[15]<=k1[15];
			k2[16]<=k1[16];
			k2[17]<=k1[17];
			k2[18]<=k1[18];
			k2[19]<=k1[19];
			k2[20]<=k1[20];
			k2[21]<=k1[21];
			k2[22]<=k1[22];
			k2[23]<=k1[23];
			k2[24]<=k1[24];
			k2[25]<=k1[25];
			k2[26]<=k1[26];
			k2[27]<=k1[27];
			k2[28]<=k1[28];
			k2[29]<=k1[29];
			k2[30]<=k1[30];
			k2[31]<=k1[31];
			k2[32]<=k1[32];
			k2[33]<=k1[33];
			k3[0]<=k2[0];
			k3[1]<=k2[1];
			k3[2]<=k2[2];
			k3[3]<=k2[3];
			k3[4]<=k2[4];
			k3[5]<=k2[5];
			k3[6]<=k2[6];
			k3[7]<=k2[7];
			k3[8]<=k2[8];
			k3[9]<=k2[9];
			k3[10]<=k2[10];
			k3[11]<=k2[11];
			k3[12]<=k2[12];
			k3[13]<=k2[13];
			k3[14]<=k2[14];
			k3[15]<=k2[15];
			k3[16]<=k2[16];
			k3[17]<=k2[17];
			k3[18]<=k2[18];
			k3[19]<=k2[19];
			k3[20]<=k2[20];
			k3[21]<=k2[21];
			k3[22]<=k2[22];
			k3[23]<=k2[23];
			k3[24]<=k2[24];
			k3[25]<=k2[25];
			k3[26]<=k2[26];
			k3[27]<=k2[27];
			k3[28]<=k2[28];
			k3[29]<=k2[29];
			k3[30]<=k2[30];
			k3[31]<=k2[31];
			k3[32]<=k2[32];
			k3[33]<=k2[33];
		end


	end
*/
	always @(posedge clk)
	begin

			z<=z_in;
			k0[0]<=k_w[0];
			k0[1]<=k_w[1];
			k0[2]<=k_w[2];
			k0[3]<=k_w[3];
			k0[4]<=k_w[4];
			k0[5]<=k_w[5];
			k0[6]<=k_w[6];
			k0[7]<=k_w[7];
			k0[8]<=k_w[8];
			k0[9]<=k_w[9];
			k0[10]<=k_w[10];
			k0[11]<=k_w[11];
			k0[12]<=k_w[12];
			k0[13]<=k_w[13];
			k0[14]<=k_w[14];
			k0[15]<=k_w[15];
			k0[16]<=k_w[16];
			k0[17]<=k_w[17];
			k0[18]<=k_w[18];
			k0[19]<=k_w[19];
			k0[20]<=k_w[20];
			k0[21]<=k_w[21];
			k0[22]<=k_w[22];
			k0[23]<=k_w[23];
			k0[24]<=k_w[24];
			k0[25]<=k_w[25];
			k0[26]<=k_w[26];
			k0[27]<=k_w[27];
			k0[28]<=k_w[28];
			k0[29]<=k_w[29];
			k0[30]<=k_w[30];
			k0[31]<=k_w[31];
			k0[32]<=k_w[32];
			k0[33]<=k_w[33];

			k1[0]<=k0[0];
			k1[1]<=k0[1];
			k1[2]<=k0[2];
			k1[3]<=k0[3];
			k1[4]<=k0[4];
			k1[5]<=k0[5];
			k1[6]<=k0[6];
			k1[7]<=k0[7];
			k1[8]<=k0[8];
			k1[9]<=k0[9];
			k1[10]<=k0[10];
			k1[11]<=k0[11];
			k1[12]<=k0[12];
			k1[13]<=k0[13];
			k1[14]<=k0[14];
			k1[15]<=k0[15];
			k1[16]<=k0[16];
			k1[17]<=k0[17];
			k1[18]<=k0[18];
			k1[19]<=k0[19];
			k1[20]<=k0[20];
			k1[21]<=k0[21];
			k1[22]<=k0[22];
			k1[23]<=k0[23];
			k1[24]<=k0[24];
			k1[25]<=k0[25];
			k1[26]<=k0[26];
			k1[27]<=k0[27];
			k1[28]<=k0[28];
			k1[29]<=k0[29];
			k1[30]<=k0[30];
			k1[31]<=k0[31];
			k1[32]<=k0[32];
			k1[33]<=k0[33];
			k2[0]<=k1[0];
			k2[1]<=k1[1];
			k2[2]<=k1[2];
			k2[3]<=k1[3];
			k2[4]<=k1[4];
			k2[5]<=k1[5];
			k2[6]<=k1[6];
			k2[7]<=k1[7];
			k2[8]<=k1[8];
			k2[9]<=k1[9];
			k2[10]<=k1[10];
			k2[11]<=k1[11];
			k2[12]<=k1[12];
			k2[13]<=k1[13];
			k2[14]<=k1[14];
			k2[15]<=k1[15];
			k2[16]<=k1[16];
			k2[17]<=k1[17];
			k2[18]<=k1[18];
			k2[19]<=k1[19];
			k2[20]<=k1[20];
			k2[21]<=k1[21];
			k2[22]<=k1[22];
			k2[23]<=k1[23];
			k2[24]<=k1[24];
			k2[25]<=k1[25];
			k2[26]<=k1[26];
			k2[27]<=k1[27];
			k2[28]<=k1[28];
			k2[29]<=k1[29];
			k2[30]<=k1[30];
			k2[31]<=k1[31];
			k2[32]<=k1[32];
			k2[33]<=k1[33];
			k3[0]<=k2[0];
			k3[1]<=k2[1];
			k3[2]<=k2[2];
			k3[3]<=k2[3];
			k3[4]<=k2[4];
			k3[5]<=k2[5];
			k3[6]<=k2[6];
			k3[7]<=k2[7];
			k3[8]<=k2[8];
			k3[9]<=k2[9];
			k3[10]<=k2[10];
			k3[11]<=k2[11];
			k3[12]<=k2[12];
			k3[13]<=k2[13];
			k3[14]<=k2[14];
			k3[15]<=k2[15];
			k3[16]<=k2[16];
			k3[17]<=k2[17];
			k3[18]<=k2[18];
			k3[19]<=k2[19];
			k3[20]<=k2[20];
			k3[21]<=k2[21];
			k3[22]<=k2[22];
			k3[23]<=k2[23];
			k3[24]<=k2[24];
			k3[25]<=k2[25];
			k3[26]<=k2[26];
			k3[27]<=k2[27];
			k3[28]<=k2[28];
			k3[29]<=k2[29];
			k3[30]<=k2[30];
			k3[31]<=k2[31];
			k3[32]<=k2[32];
			k3[33]<=k2[33];



		x[0]<=x_w[0];
		x[1]<=x_w[1];

		x[2]<=x_w[2];
		x[3]<=x_w[3];
		x[4]<=x_w[4];
		x[5]<=x_w[5];
		x[6]<=x_w[6];
		x[7]<=x_w[7];
		x[8]<=x_w[8];
		x[9]<=x_w[9];
		x[10]<=x_w[10];
		x[11]<=x_w[11];
		x[12]<=x_w[12];
		x[13]<=x_w[13];
		x[14]<=x_w[14];
		x[15]<=x_w[15];
		x[16]<=x_w[16];
		x[17]<=x_w[17];
		x[18]<=x_w[18];
		x[19]<=x_w[19];
		x[20]<=x_w[20];
		x[21]<=x_w[21];
		x[22]<=x_w[22];
		x[23]<=x_w[23];
		x[24]<=x_w[24];
		x[25]<=x_w[25];
		x[26]<=x_w[26];
		x[27]<=x_w[27];
		x[28]<=x_w[28];
		x[29]<=x_w[29];
		x[30]<=x_w[30];
		x[31]<=x_w[31];
		x[32]<=x_w[32];
		x[33]<=x_w[33];

		x1[0]<=x[0];
		x1[1]<=x[1];
		x1[2]<=x[2];
		x1[3]<=x[3];
		x1[4]<=x[4];
		x1[5]<=x[5];
		x1[6]<=x[6];
		x1[7]<=x[7];
		x1[8]<=x[8];
		x1[9]<=x[9];
		x1[10]<=x[10];
		x1[11]<=x[11];
		x1[12]<=x[12];
		x1[13]<=x[13];
		x1[14]<=x[14];
		x1[15]<=x[15];
		x1[16]<=x[16];
		x1[17]<=x[17];
		x1[18]<=x[18];
		x1[19]<=x[19];
		x1[20]<=x[20];
		x1[21]<=x[21];
		x1[22]<=x[22];
		x1[23]<=x[23];
		x1[24]<=x[24];
		x1[25]<=x[25];
		x1[26]<=x[26];
		x1[27]<=x[27];
		x1[28]<=x[28];
		x1[29]<=x[29];
		x1[30]<=x[30];
		x1[31]<=x[31];
		x1[32]<=x[32];
		x1[33]<=x[33];
		$display("Input:%d\n",plaintext);


		ciphertext_reg<=ciphertext_w;
	end


////////////////Reset logic before I/Os/////////////////
	assign ciphertext_w = reset ? 32'd0 : {x[33],x1[32]};

///////////////// c ^ (z0)j/////////////////////////////////////////
//Pending Confirmation

	assign z_in = reset ? 31'b0 : 31'b1111101000100101011000011100110;

/////////////key generator////////////////////////////
//Some pending changes
	assign k_w[0] = reset ? 16'd0 : key[15:0];
	assign k_w[1] = reset ? 16'd0 : key[31:16];
	assign k_w[2] = reset ? 16'd0 : key[47:32];
	assign k_w[3] = reset ? 16'd0 : key[63:48];

//For generating K4
	assign k_w[4] = reset ? 16'd0 : (k0[0] ^ ({k0[3][2:0],k0[3][15:3]} ^ k0[1]) ^ ({k0[3][3:0],k0[3][15:4]} ^ {k0[1][0],k0[1][15:1]}) ^ (16'd65532 ^ z[0])) ;
//For generating K5
	assign k_w[5] = reset ? 16'd0 : (k1[1] ^ ({k0[4][2:0],k0[4][15:3]} ^ k1[2]) ^ ({k0[4][3:0],k0[4][15:4]} ^ {k1[2][0],k1[2][15:1]}) ^ (16'd65532 ^ z[1])) ;
//For generating K6
	assign k_w[6] = reset ? 16'd0 : (k2[2] ^ ({k0[5][2:0],k0[5][15:3]} ^ k2[3]) ^ ({k0[5][3:0],k0[5][15:4]} ^ {k2[3][0],k2[3][15:1]}) ^ (16'd65532 ^ z[2])) ;
	
	assign k_w[7] = reset ? 16'd0 : (k3[3] ^ ({k0[6][2:0],k0[6][15:3]} ^ k2[4]) ^ ({k0[6][3:0],k0[6][15:4]} ^ {k2[4][0],k2[4][15:1]}) ^ (16'd65532 ^ z[3])) ;

	assign k_w[8] = reset ? 16'd0 : (k3[4] ^ ({k0[7][2:0],k0[7][15:3]} ^ k2[5]) ^ ({k0[7][3:0],k0[7][15:4]} ^ {k2[5][0],k2[5][15:1]}) ^ (16'd65532 ^ z[4])) ;

	assign k_w[9] = reset ? 16'd0 : (k3[5] ^ ({k0[8][2:0],k0[8][15:3]} ^ k2[6]) ^ ({k0[8][3:0],k0[8][15:4]} ^ {k2[6][0],k2[6][15:1]}) ^ (16'd65532 ^ z[5])) ;

	assign k_w[10] = reset ? 16'd0 : (k3[6] ^ ({k0[9][2:0],k0[9][15:3]} ^ k2[7]) ^ ({k0[9][3:0],k0[9][15:4]} ^ {k2[7][0],k2[7][15:1]}) ^ (16'd65532 ^ z[6])) ;

	assign k_w[11] = reset ? 16'd0 : (k3[7] ^ ({k0[10][2:0],k0[10][15:3]} ^ k2[8]) ^ ({k0[10][3:0],k0[10][15:4]} ^ {k2[8][0],k2[8][15:1]}) ^ (16'd65532 ^ z[7])) ;

	assign k_w[12] = reset ? 16'd0 : (k3[8] ^ ({k0[11][2:0],k0[11][15:3]} ^ k2[9]) ^ ({k0[11][3:0],k0[11][15:4]} ^ {k2[9][0],k2[9][15:1]}) ^ (16'd65532 ^ z[8])) ;

	assign k_w[13] = reset ? 16'd0 : (k3[9] ^ ({k0[12][2:0],k0[12][15:3]} ^ k2[10]) ^ ({k0[12][3:0],k0[12][15:4]} ^ {k2[10][0],k2[10][15:1]}) ^ (16'd65532 ^ z[9])) ;

	assign k_w[14] = reset ? 16'd0 : (k3[10] ^ ({k0[13][2:0],k0[13][15:3]} ^ k2[11]) ^ ({k0[13][3:0],k0[13][15:4]} ^ {k2[11][0],k2[11][15:1]}) ^ (16'd65532 ^ z[10])) ;

	assign k_w[15] = reset ? 16'd0 : (k3[11] ^ ({k0[14][2:0],k0[14][15:3]} ^ k2[12]) ^ ({k0[14][3:0],k0[14][15:4]} ^ {k2[12][0],k2[12][15:1]}) ^ (16'd65532 ^ z[11])) ;

	assign k_w[16] = reset ? 16'd0 : (k3[12] ^ ({k0[15][2:0],k0[15][15:3]} ^ k2[13]) ^ ({k0[15][3:0],k0[15][15:4]} ^ {k2[13][0],k2[13][15:1]}) ^ (16'd65532 ^ z[12])) ;

	assign k_w[17] = reset ? 16'd0 : (k3[13] ^ ({k0[16][2:0],k0[16][15:3]} ^ k2[14]) ^ ({k0[16][3:0],k0[16][15:4]} ^ {k2[14][0],k2[14][15:1]}) ^ (16'd65532 ^ z[13])) ;

	assign k_w[18] = reset ? 16'd0 : (k3[14] ^ ({k0[17][2:0],k0[17][15:3]} ^ k2[15]) ^ ({k0[17][3:0],k0[17][15:4]} ^ {k2[15][0],k2[15][15:1]}) ^ (16'd65532 ^ z[14])) ;

	assign k_w[19] = reset ? 16'd0 : (k3[15] ^ ({k0[18][2:0],k0[18][15:3]} ^ k2[16]) ^ ({k0[18][3:0],k0[18][15:4]} ^ {k2[16][0],k2[16][15:1]}) ^ (16'd65532 ^ z[15])) ;

	assign k_w[20] = reset ? 16'd0 : (k3[16] ^ ({k0[19][2:0],k0[19][15:3]} ^ k2[17]) ^ ({k0[19][3:0],k0[19][15:4]} ^ {k2[17][0],k2[17][15:1]}) ^ (16'd65532 ^ z[16])) ;

	assign k_w[21] = reset ? 16'd0 : (k3[17] ^ ({k0[20][2:0],k0[20][15:3]} ^ k2[18]) ^ ({k0[20][3:0],k0[20][15:4]} ^ {k2[18][0],k2[18][15:1]}) ^ (16'd65532 ^ z[17])) ;

	assign k_w[22] = reset ? 16'd0 : (k3[18] ^ ({k0[21][2:0],k0[21][15:3]} ^ k2[19]) ^ ({k0[21][3:0],k0[21][15:4]} ^ {k2[19][0],k2[19][15:1]}) ^ (16'd65532 ^ z[18])) ;

	assign k_w[23] = reset ? 16'd0 : (k3[19] ^ ({k0[22][2:0],k0[22][15:3]} ^ k2[20]) ^ ({k0[22][3:0],k0[22][15:4]} ^ {k2[20][0],k2[20][15:1]}) ^ (16'd65532 ^ z[19])) ;

	assign k_w[24] = reset ? 16'd0 : (k3[20] ^ ({k0[23][2:0],k0[23][15:3]} ^ k2[21]) ^ ({k0[23][3:0],k0[23][15:4]} ^ {k2[21][0],k2[21][15:1]}) ^ (16'd65532 ^ z[20])) ;

	assign k_w[25] = reset ? 16'd0 : (k3[21] ^ ({k0[24][2:0],k0[24][15:3]} ^ k2[22]) ^ ({k0[24][3:0],k0[24][15:4]} ^ {k2[22][0],k2[22][15:1]}) ^ (16'd65532 ^ z[21])) ;

	assign k_w[26] = reset ? 16'd0 : (k3[22] ^ ({k0[25][2:0],k0[25][15:3]} ^ k2[23]) ^ ({k0[25][3:0],k0[25][15:4]} ^ {k2[23][0],k2[23][15:1]}) ^ (16'd65532 ^ z[22])) ;

	assign k_w[27] = reset ? 16'd0 : (k3[23] ^ ({k0[26][2:0],k0[26][15:3]} ^ k2[24]) ^ ({k0[26][3:0],k0[26][15:4]} ^ {k2[24][0],k2[24][15:1]}) ^ (16'd65532 ^ z[23])) ;

	assign k_w[28] = reset ? 16'd0 : (k3[24] ^ ({k0[27][2:0],k0[27][15:3]} ^ k2[25]) ^ ({k0[27][3:0],k0[27][15:4]} ^ {k2[25][0],k2[25][15:1]}) ^ (16'd65532 ^ z[24])) ;

	assign k_w[29] = reset ? 16'd0 : (k3[25] ^ ({k0[28][2:0],k0[28][15:3]} ^ k2[26]) ^ ({k0[28][3:0],k0[28][15:4]} ^ {k2[26][0],k2[26][15:1]}) ^ (16'd65532 ^ z[25])) ;

	assign k_w[30] = reset ? 16'd0 : (k3[26] ^ ({k0[29][2:0],k0[29][15:3]} ^ k2[27]) ^ ({k0[29][3:0],k0[29][15:4]} ^ {k2[27][0],k2[27][15:1]}) ^ (16'd65532 ^ z[26])) ;

	assign k_w[31] = reset ? 16'd0 : (k3[27] ^ ({k0[30][2:0],k0[30][15:3]} ^ k2[28]) ^ ({k0[30][3:0],k0[30][15:4]} ^ {k2[28][0],k2[28][15:1]}) ^ (16'd65532 ^ z[27])) ;

	assign k_w[32] = reset ? 16'd0 : (k3[28] ^ ({k0[31][2:0],k0[31][15:3]} ^ k2[29]) ^ ({k0[31][3:0],k0[31][15:4]} ^ {k2[29][0],k2[29][15:1]}) ^ (16'd65532 ^ z[28])) ;

	assign k_w[33] = reset ? 16'd0 : (k3[29] ^ ({k0[32][2:0],k0[32][15:3]} ^ k2[30]) ^ ({k0[32][3:0],k0[32][15:4]} ^ {k2[30][0],k2[30][15:1]}) ^ (16'd65532 ^ z[29])) ;


	assign k_out[0] = reset ? 16'd0 : k0[0] ;
	assign k_out[1] = reset ? 16'd0 : k1[1] ;
	assign k_out[2] = reset ? 16'd0 : k2[2] ;
	assign k_out[3] = reset ? 16'd0 : k3[3] ;

	assign k_out[4] = reset ? 16'd0 : k3[4] ;

	assign k_out[5] = reset ? 16'd0 : k3[5] ;

	assign k_out[6] = reset ? 16'd0 : k3[6] ;

	assign k_out[7] = reset ? 16'd0 : k3[7] ;

	assign k_out[8] = reset ? 16'd0 : k3[8] ;

	assign k_out[9] = reset ? 16'd0 : k3[9] ;

	assign k_out[10] = reset ? 16'd0 : k3[10] ;

	assign k_out[11] = reset ? 16'd0 : k3[11] ;

	assign k_out[12] = reset ? 16'd0 : k3[12] ;

	assign k_out[13] = reset ? 16'd0 : k3[13] ;

	assign k_out[14] = reset ? 16'd0 : k3[14] ;

	assign k_out[15] = reset ? 16'd0 : k3[15] ;

	assign k_out[16] = reset ? 16'd0 : k3[16] ;

	assign k_out[17] = reset ? 16'd0 : k3[17] ;

	assign k_out[18] = reset ? 16'd0 : k3[18] ;

	assign k_out[19] = reset ? 16'd0 : k3[19] ;

	assign k_out[20] = reset ? 16'd0 : k3[20] ;

	assign k_out[21] = reset ? 16'd0 : k3[21] ;

	assign k_out[22] = reset ? 16'd0 : k3[22] ;

	assign k_out[23] = reset ? 16'd0 : k3[23] ;

	assign k_out[24] = reset ? 16'd0 : k3[24] ;

	assign k_out[25] = reset ? 16'd0 : k3[25] ;

	assign k_out[26] = reset ? 16'd0 : k3[26] ;

	assign k_out[27] = reset ? 16'd0 : k3[27] ;

	assign k_out[28] = reset ? 16'd0 : k3[28] ;

	assign k_out[29] = reset ? 16'd0 : k3[29] ;

	assign k_out[30] = reset ? 16'd0 : k3[30] ;

	assign k_out[31] = reset ? 16'd0 : k3[31] ;

	assign k_out[32] = reset ? 16'd0 : k3[32] ;

	assign k_out[33] = reset ? 16'd0 : k3[33] ;


 
///////////////Round Function//////////////////////////
//Pending Confirmation
	assign x_w[0] = reset ? 16'd0 : plaintext[15:0] ;
	assign x_w[1] = reset ? 16'd0 : plaintext[31:16] ;

	assign x_w[2] = reset ? 16'd0 : (x[0] ^ ({x[1][14:0],x[1][15]} & {x[1][7:0],x[1][15:8]}) ^ {x[1][13:0],x[1][15:14]} ^ k_out[0]) ;

	assign ciphertext= ciphertext_reg;
	assign x_w[3] = reset ? 16'd0 : (x1[1] ^ ({x[2][14:0],x[2][15]} & {x[2][7:0],x[2][15:8]}) ^ {x[2][13:0],x[2][15:14]} ^ k_out[1]) ;
//	$display("\nx_w[3]=%d, x1[1]=%d, x[2]=%d, k_out[1]=%d", x_w[3], x[1], x[2], k_out[1])


	assign x_w[4] = reset ? 16'd0 : (x1[2] ^ ({x[3][14:0],x[3][15]} & {x[3][7:0],x[3][15:8]}) ^ {x[3][13:0],x[3][15:14]} ^ k_out[2]) ;
//	$display("\nx_w[4]=%d, x1[2]=%d, x[3]=%d, k_out[2]=%d", x_w[4], x[2], x[3], k_out[2])


	assign x_w[5] = reset ? 16'd0 : (x1[3] ^ ({x[4][14:0],x[4][15]} & {x[4][7:0],x[4][15:8]}) ^ {x[4][13:0],x[4][15:14]} ^ k_out[3]) ;
//	$display("\nx_w[5]=%d, x1[3]=%d, x[4]=%d, k_out[3]=%d", x_w[5], x[3], x[4], k_out[3])


	assign x_w[6] = reset ? 16'd0 : (x1[4] ^ ({x[5][14:0],x[5][15]} & {x[5][7:0],x[5][15:8]}) ^ {x[5][13:0],x[5][15:14]} ^ k_out[4]) ;
//	$display("\nx_w[6]=%d, x1[4]=%d, x[5]=%d, k_out[4]=%d", x_w[6], x[4], x[5], k_out[4])


	assign x_w[7] = reset ? 16'd0 : (x1[5] ^ ({x[6][14:0],x[6][15]} & {x[6][7:0],x[6][15:8]}) ^ {x[6][13:0],x[6][15:14]} ^ k_out[5]) ;
//	$display("\nx_w[7]=%d, x1[5]=%d, x[6]=%d, k_out[5]=%d", x_w[7], x[5], x[6], k_out[5])


	assign x_w[8] = reset ? 16'd0 : (x1[6] ^ ({x[7][14:0],x[7][15]} & {x[7][7:0],x[7][15:8]}) ^ {x[7][13:0],x[7][15:14]} ^ k_out[6]) ;
//	$display("\nx_w[8]=%d, x1[6]=%d, x[7]=%d, k_out[6]=%d", x_w[8], x[6], x[7], k_out[6])


	assign x_w[9] = reset ? 16'd0 : (x1[7] ^ ({x[8][14:0],x[8][15]} & {x[8][7:0],x[8][15:8]}) ^ {x[8][13:0],x[8][15:14]} ^ k_out[7]) ;
//	$display("\nx_w[9]=%d, x1[7]=%d, x[8]=%d, k_out[7]=%d", x_w[9], x[7], x[8], k_out[7])


	assign x_w[10] = reset ? 16'd0 : (x1[8] ^ ({x[9][14:0],x[9][15]} & {x[9][7:0],x[9][15:8]}) ^ {x[9][13:0],x[9][15:14]} ^ k_out[8]) ;
//	$display("\nx_w[10]=%d, x1[8]=%d, x[9]=%d, k_out[8]=%d", x_w[10], x[8], x[9], k_out[8])


	assign x_w[11] = reset ? 16'd0 : (x1[9] ^ ({x[10][14:0],x[10][15]} & {x[10][7:0],x[10][15:8]}) ^ {x[10][13:0],x[10][15:14]} ^ k_out[9]) ;
//	$display("\nx_w[11]=%d, x1[9]=%d, x[10]=%d, k_out[9]=%d", x_w[11], x[9], x[10], k_out[9])


	assign x_w[12] = reset ? 16'd0 : (x1[10] ^ ({x[11][14:0],x[11][15]} & {x[11][7:0],x[11][15:8]}) ^ {x[11][13:0],x[11][15:14]} ^ k_out[10]) ;
//	$display("\nx_w[12]=%d, x1[10]=%d, x[11]=%d, k_out[10]=%d", x_w[12], x[10], x[11], k_out[10])


	assign x_w[13] = reset ? 16'd0 : (x1[11] ^ ({x[12][14:0],x[12][15]} & {x[12][7:0],x[12][15:8]}) ^ {x[12][13:0],x[12][15:14]} ^ k_out[11]) ;
//	$display("\nx_w[13]=%d, x1[11]=%d, x[12]=%d, k_out[11]=%d", x_w[13], x[11], x[12], k_out[11])


	assign x_w[14] = reset ? 16'd0 : (x1[12] ^ ({x[13][14:0],x[13][15]} & {x[13][7:0],x[13][15:8]}) ^ {x[13][13:0],x[13][15:14]} ^ k_out[12]) ;
//	$display("\nx_w[14]=%d, x1[12]=%d, x[13]=%d, k_out[12]=%d", x_w[14], x[12], x[13], k_out[12])


	assign x_w[15] = reset ? 16'd0 : (x1[13] ^ ({x[14][14:0],x[14][15]} & {x[14][7:0],x[14][15:8]}) ^ {x[14][13:0],x[14][15:14]} ^ k_out[13]) ;
//	$display("\nx_w[15]=%d, x1[13]=%d, x[14]=%d, k_out[13]=%d", x_w[15], x[13], x[14], k_out[13])


	assign x_w[16] = reset ? 16'd0 : (x1[14] ^ ({x[15][14:0],x[15][15]} & {x[15][7:0],x[15][15:8]}) ^ {x[15][13:0],x[15][15:14]} ^ k_out[14]) ;
//	$display("\nx_w[16]=%d, x1[14]=%d, x[15]=%d, k_out[14]=%d", x_w[16], x[14], x[15], k_out[14])


	assign x_w[17] = reset ? 16'd0 : (x1[15] ^ ({x[16][14:0],x[16][15]} & {x[16][7:0],x[16][15:8]}) ^ {x[16][13:0],x[16][15:14]} ^ k_out[15]) ;
//	$display("\nx_w[17]=%d, x1[15]=%d, x[16]=%d, k_out[15]=%d", x_w[17], x[15], x[16], k_out[15])


	assign x_w[18] = reset ? 16'd0 : (x1[16] ^ ({x[17][14:0],x[17][15]} & {x[17][7:0],x[17][15:8]}) ^ {x[17][13:0],x[17][15:14]} ^ k_out[16]) ;
//	$display("\nx_w[18]=%d, x1[16]=%d, x[17]=%d, k_out[16]=%d", x_w[18], x[16], x[17], k_out[16])


	assign x_w[19] = reset ? 16'd0 : (x1[17] ^ ({x[18][14:0],x[18][15]} & {x[18][7:0],x[18][15:8]}) ^ {x[18][13:0],x[18][15:14]} ^ k_out[17]) ;
//	$display("\nx_w[19]=%d, x1[17]=%d, x[18]=%d, k_out[17]=%d", x_w[19], x[17], x[18], k_out[17])


	assign x_w[20] = reset ? 16'd0 : (x1[18] ^ ({x[19][14:0],x[19][15]} & {x[19][7:0],x[19][15:8]}) ^ {x[19][13:0],x[19][15:14]} ^ k_out[18]) ;
//	$display("\nx_w[20]=%d, x1[18]=%d, x[19]=%d, k_out[18]=%d", x_w[20], x[18], x[19], k_out[18])


	assign x_w[21] = reset ? 16'd0 : (x1[19] ^ ({x[20][14:0],x[20][15]} & {x[20][7:0],x[20][15:8]}) ^ {x[20][13:0],x[20][15:14]} ^ k_out[19]) ;
//	$display("\nx_w[21]=%d, x1[19]=%d, x[20]=%d, k_out[19]=%d", x_w[21], x[19], x[20], k_out[19])


	assign x_w[22] = reset ? 16'd0 : (x1[20] ^ ({x[21][14:0],x[21][15]} & {x[21][7:0],x[21][15:8]}) ^ {x[21][13:0],x[21][15:14]} ^ k_out[20]) ;
//	$display("\nx_w[22]=%d, x1[20]=%d, x[21]=%d, k_out[20]=%d", x_w[22], x[20], x[21], k_out[20])


	assign x_w[23] = reset ? 16'd0 : (x1[21] ^ ({x[22][14:0],x[22][15]} & {x[22][7:0],x[22][15:8]}) ^ {x[22][13:0],x[22][15:14]} ^ k_out[21]) ;
//	$display("\nx_w[23]=%d, x1[21]=%d, x[22]=%d, k_out[21]=%d", x_w[23], x[21], x[22], k_out[21])


	assign x_w[24] = reset ? 16'd0 : (x1[22] ^ ({x[23][14:0],x[23][15]} & {x[23][7:0],x[23][15:8]}) ^ {x[23][13:0],x[23][15:14]} ^ k_out[22]) ;
//	$display("\nx_w[24]=%d, x1[22]=%d, x[23]=%d, k_out[22]=%d", x_w[24], x[22], x[23], k_out[22])


	assign x_w[25] = reset ? 16'd0 : (x1[23] ^ ({x[24][14:0],x[24][15]} & {x[24][7:0],x[24][15:8]}) ^ {x[24][13:0],x[24][15:14]} ^ k_out[23]) ;
//	$display("\nx_w[25]=%d, x1[23]=%d, x[24]=%d, k_out[23]=%d", x_w[25], x[23], x[24], k_out[23])


	assign x_w[26] = reset ? 16'd0 : (x1[24] ^ ({x[25][14:0],x[25][15]} & {x[25][7:0],x[25][15:8]}) ^ {x[25][13:0],x[25][15:14]} ^ k_out[24]) ;
//	$display("\nx_w[26]=%d, x1[24]=%d, x[25]=%d, k_out[24]=%d", x_w[26], x[24], x[25], k_out[24])


	assign x_w[27] = reset ? 16'd0 : (x1[25] ^ ({x[26][14:0],x[26][15]} & {x[26][7:0],x[26][15:8]}) ^ {x[26][13:0],x[26][15:14]} ^ k_out[25]) ;
//	$display("\nx_w[27]=%d, x1[25]=%d, x[26]=%d, k_out[25]=%d", x_w[27], x[25], x[26], k_out[25])


	assign x_w[28] = reset ? 16'd0 : (x1[26] ^ ({x[27][14:0],x[27][15]} & {x[27][7:0],x[27][15:8]}) ^ {x[27][13:0],x[27][15:14]} ^ k_out[26]) ;
//	$display("\nx_w[28]=%d, x1[26]=%d, x[27]=%d, k_out[26]=%d", x_w[28], x[26], x[27], k_out[26])


	assign x_w[29] = reset ? 16'd0 : (x1[27] ^ ({x[28][14:0],x[28][15]} & {x[28][7:0],x[28][15:8]}) ^ {x[28][13:0],x[28][15:14]} ^ k_out[27]) ;
//	$display("\nx_w[29]=%d, x1[27]=%d, x[28]=%d, k_out[27]=%d", x_w[29], x[27], x[28], k_out[27])


	assign x_w[30] = reset ? 16'd0 : (x1[28] ^ ({x[29][14:0],x[29][15]} & {x[29][7:0],x[29][15:8]}) ^ {x[29][13:0],x[29][15:14]} ^ k_out[28]) ;
//	$display("\nx_w[30]=%d, x1[28]=%d, x[29]=%d, k_out[28]=%d", x_w[30], x[28], x[29], k_out[28])


	assign x_w[31] = reset ? 16'd0 : (x1[29] ^ ({x[30][14:0],x[30][15]} & {x[30][7:0],x[30][15:8]}) ^ {x[30][13:0],x[30][15:14]} ^ k_out[29]) ;
//	$display("\nx_w[31]=%d, x1[29]=%d, x[30]=%d, k_out[29]=%d", x_w[31], x[29], x[30], k_out[29])


	assign x_w[32] = reset ? 16'd0 : (x1[30] ^ ({x[31][14:0],x[31][15]} & {x[31][7:0],x[31][15:8]}) ^ {x[31][13:0],x[31][15:14]} ^ k_out[30]) ;
//	$display("\nx_w[32]=%d, x1[30]=%d, x[31]=%d, k_out[30]=%d", x_w[32], x[30], x[31], k_out[30])


	assign x_w[33] = reset ? 16'd0 : (x1[31] ^ ({x[32][14:0],x[32][15]} & {x[32][7:0],x[32][15:8]}) ^ {x[32][13:0],x[32][15:14]} ^ k_out[31]) ;
//	$display("\nx_w[33]=%d, x1[31]=%d, x[32]=%d, k_out[31]=%d", x_w[33], x[31], x[32], k_out[31])



endmodule: simon32_64




